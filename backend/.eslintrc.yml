---
    parserOptions:
        ecmaVersion: 6
    env:
        node: true
        mocha: true
        es6: true

    globals:
        Promise: true
        expect: true
        chai: true

    rules:
        # ______ _____ _____ _____ ___________ _      _____   _________________ ___________  _____
        # | ___ \  _  /  ___/  ___|_   _| ___ \ |    |  ___| |  ___| ___ \ ___ \  _  | ___ \/  ___|
        # | |_/ / | | \ `--.\ `--.  | | | |_/ / |    | |__   | |__ | |_/ / |_/ / | | | |_/ /\ `--.
        # |  __/| | | |`--. \`--. \ | | | ___ \ |    |  __|  |  __||    /|    /| | | |    /  `--. \
        # | |   \ \_/ /\__/ /\__/ /_| |_| |_/ / |____| |___  | |___| |\ \| |\ \\ \_/ / |\ \ /\__/ /
        # \_|    \___/\____/\____/ \___/\____/\_____/\____/  \____/\_| \_\_| \_|\___/\_| \_|\____/
        #

        # disallow assignment operators in conditional expressions
        no-cond-assign:
            - 2
            - "always"
        # disallow the use of console
        no-console: 2
        # disallow control characters in regular expressions
        no-control-regex: 1
        # disallow the use of debugger
        no-debugger: 0
        # disallow constant expressions in conditions
        no-constant-condition: 1
        # disallow duplicate arguments in function definitions
        no-dupe-args: 2
        # disallow duplicate keys in object literals
        no-dupe-keys: 2
        # disallow duplicate case labels
        no-duplicate-case: 2
        # disallow empty character classes in regular expressions
        no-empty-character-class: 2
        # disallow empty block statements
        no-empty: 2
        # disallow reassigning exceptions in catch clauses
        no-ex-assign: 0
        # disallow unnecessary boolean casts
        no-extra-boolean-cast: 2
        # disallow unecessary parentheses
        no-extra-parens:
            - 2
            - "all"
            - nestedBinaryExpressions: false
        # disallow unecessary semicolons
        no-extra-semi: 2
        # disallow reassigning function declarations
        no-func-assign: 2
        # disallow function declarations in nested blocks
        no-inner-declarations:
            - 2
            - "functions"
        # disallow invalid regular expression strings in RegExp constructors
        no-invalid-regexp: 2
        # disallow irregular whitespace outside of strings and comments
        no-irregular-whitespace:
            - 2
            - skipStrings: true
              skipComments: true
              skipRegExps: true
              skipTemplates: true
        # disallow calling global object properties as functions
        no-obj-calls: 2
        # disallow calling some Object.prototype methods directly on objects
        no-prototype-builtins: 2
        # disallow multiple spaces in regular expressions
        no-regex-spaces: 1
        # disallow sparse arrays
        no-sparse-arrays: 2
        # disallow template literal placeholder syntax in regular strings
        no-template-curly-in-string: 1
        # disallow confusing multiline expressions
        no-unexpected-multiline: 2
        # disallow unreachable code after return, throw, continue, and break statements
        no-unreachable: 2
        # disallow control flow statements in finally blocks
        no-unsafe-finally: 1
        # disallow negating the left operand of relational operators
        no-unsafe-negation: 2
        # requires calls to isNaN() when checking for NaN
        use-isnan: 2
        # enforce comparing typeof expressions against valid strings
        valid-typeof: 2
        # enforce valid JSDoc comments
        valid-jsdoc:
            - 2
            - requireReturn: false
              prefer:
                  arg: "param"
                  argument: "param"
                  augments: "extends"
                  constant: "const"
                  constructor: "class"
                  defaultValue: "default"
                  description: "desc"
                  exception: "throws"
                  fires: "emits"
                  func: "function"
                  host: "external"
                  property: "prop"
                  returns: "return"
                  var: "member"
                  virtual: "abstract"

        # ______ _____ _____ _____  ____________  ___  _____ _____ _____ _____  _____
        # | ___ \  ___/  ___|_   _| | ___ \ ___ \/ _ \/  __ \_   _|_   _/  __ \|  ___|
        # | |_/ / |__ \ `--.  | |   | |_/ / |_/ / /_\ \ /  \/ | |   | | | /  \/| |__
        # | ___ \  __| `--. \ | |   |  __/|    /|  _  | |     | |   | | | |    |  __|
        # | |_/ / |___/\__/ / | |   | |   | |\ \| | | | \__/\ | |  _| |_| \__/\| |___
        # \____/\____/\____/  \_/   \_|   \_| \_\_| |_/\____/ \_/  \___/ \____/\____/
        #

        # enforce getter and setter pairs in objects
        accessor-pairs: 1
        # enforce return statements in callbacks of array methods
        array-callback-return: 2
        # enforce the use of variables within the scope they are defined
        block-scoped-var: 1
        # enforce that class methods utilize this
        class-methods-use-this: 1
        # enforce a maximum cyclomatic complexity allowed in a program
        complexity:
            - 1
            - 10
        # require return statements to either always or never specify values
        consistent-return:
            - 1
            - treatUndefinedAsUnspecified: true
        # enforce consistent brace style for all control statements
        curly:
            - 2
            - "all"
        # require default cases in switch statements
        default-case:
            - 2
            - commentPattern: "^[nN]o [dD]efault$"
        # enforce consistent newlines before and after dots
        dot-location:
            - 2
            - "property"
        # enforce dot notation whenever possible
        dot-notation: 1
        # require the use of === and !==
        eqeqeq:
            - 2
            - "smart"
        # require for-in loops to include an if statement
        guard-for-in: 1
        # disallow the use of alert, confirm, and prompt
        no-alert: 0
        # disallow the use of arguments.caller or arguments.callee
        no-caller: 0
        # disallow lexical declarations in case clauses
        no-case-declarations: 1
        # disallow division operators explicitly at the beginning of regular expressions
        no-div-regex: 0
        # disallow else blocks after return statements in if statements
        no-else-return: 1
        # disallow empty functions
        no-empty-function: 1
        # disallow empty destructuring patterns
        no-empty-pattern: 2
        # disallow null comparisons without type-checking operators
        no-eq-null: 0
        # disallow the use of eval()
        no-eval: 0
        # disallow extending native types
        no-extend-native: 2
        # disallow unnecessary calls to .bind()
        no-extra-bind: 1
        # disallow unnecessary labels
        no-extra-label: 2
        # disallow fallthrough of case statements
        no-fallthrough: 2
        # disallow leading or trailing decimal points in numeric literals
        no-floating-decimal: 2
        # disallow assignments to native objects or read-only global variables
        no-global-assign: 2
        # disallow shorthand type conversions
        no-implicit-coercion: 2
        # disallow var and named function declarations in the global scope
        no-implicit-globals: 2
        # disallow the use of eval()-like methods
        no-implied-eval: 0
        # disallow this keywords outside of classes or class-like objects
        no-invalid-this: 0
        # disallow the use of the __iterator__ property
        no-iterator: 2
        # disallow labeled statements
        no-labels: 2
        # disallow unnecessary nested blocks
        no-lone-blocks: 2
        # disallow function declarations and expressions inside loop statements
        no-loop-func: 0
        # disallow magic numbers
        no-magic-numbers: 0
        # disallow multiple spaces
        no-multi-spaces: 2
        # disallow multiline strings
        no-multi-str: 0
        # disallow new operators with the Function object
        no-new-func: 0
        # disallow new operators with the String, Number, and Boolean objects
        no-new-wrappers: 0
        # disallow new operators outside of assignments or comparisons
        no-new: 1
        # disallow octal escape sequences in string literals
        no-octal-escape: 0
        # disallow octal literals
        no-octal: 0
        # disallow reassigning function parameters
        no-param-reassign: 0
        # disallow the use of the __proto__ property
        no-proto: 2
        # disallow var redeclaration
        no-redeclare:
            - 2
            - builtinGlobals: true
        # disallow assignment operators in return statements
        no-return-assign: 2
        # disallow javascript: urls
        no-script-url: 1
        # disallow assignments where both sides are exactly the same
        no-self-assign: 2
        # disallow comparisons where both sides are exactly the same
        no-self-compare: 2
        # disallow comma operators
        no-sequences: 1
        # disallow throwing literals as exceptions
        no-throw-literal: 0
        # disallow unmodified loop conditions
        no-unmodified-loop-condition: 2
        # disallow unused expressions:
        no-unused-expressions: 1
        # disallow unused labels
        no-unused-labels: 2
        # disallow unnecessary calls to .call() and .apply()
        no-useless-call: 1
        # disallow unnecessary concatenation of literals or template literals
        no-useless-concat: 1
        # disallow unnecessary escape characters
        no-useless-escape: 1
        # disallow void operators
        no-void: 0
        # disallow specified warning terms in comments
        no-warning-comments: 0
        # disallow with statements
        no-with: 2
        # enforce the consistent use of the radix argument when using parseInt()
        radix:
            - 2
            - "always"
        # require var declarations be placed at the top of their containing scope
        vars-on-top: 0
        # require parentheses around immediate function invocations
        wrap-iife: 2
        # require or disallow “Yoda” conditions
        yoda:
            - 2
            - "never"
            - exceptRange: true

        # ___  ______________ _____
        # |  \/  |  _  |  _  \  ___|
        # | .  . | | | | | | | |__
        # | |\/| | | | | | | |  __|
        # | |  | \ \_/ / |/ /| |___
        # \_|  |_/\___/|___/ \____/
        #

        #require or disallow strict mode directives
        strict: 0

        #  _   _  ___  ______ _____  ___  ______ _      _____ _____
        # | | | |/ _ \ | ___ \_   _|/ _ \ | ___ \ |    |  ___/  ___|
        # | | | / /_\ \| |_/ / | | / /_\ \| |_/ / |    | |__ \ `--.
        # | | | |  _  ||    /  | | |  _  || ___ \ |    |  __| `--. \
        # \ \_/ / | | || |\ \ _| |_| | | || |_/ / |____| |___/\__/ /
        #  \___/\_| |_/\_| \_|\___/\_| |_/\____/\_____/\____/\____/
        #

        # require or disallow initialization in var declarations
        init-declarations: 0
        # disallow catch clause parameters from shadowing variables in the outer scope
        no-catch-shadow: 0
        # disallow deleting variables
        no-delete-var: 2
        # disallow labels that share a name with a variable
        no-label-var: 2
        # disallow specified global variables
        no-restricted-globals: 0
        # disallow identifiers from shadowing restricted names
        no-shadow-restricted-names: 0
        # disallow var declarations from shadowing variables in the outer scope
        no-shadow: 0
        # disallow initializing variables to undefined
        no-undef-init: 2
        # disallow the use of undeclared variables unless mentioned in /*global */ comments
        no-undef: 2
        # disallow the use of undefined as an identifier
        no-undefined: 2
        # disallow unused variables
        no-unused-vars:
            - 2
            - argsIgnorePattern: "^UNUSED_*"
              varsIgnorePattern: "^UNUSED_*"
        # disallow the use of variables before they are defined
        no-use-before-define:
            - 2
            - functions: false
              classes: false

        #  _   _ ___________ _____    ___ _____
        # | \ | |  _  |  _  \  ___|  |_  /  ___|
        # |  \| | | | | | | | |__      | \ `--.
        # | . ` | | | | | | |  __|     | |`--. \
        # | |\  \ \_/ / |/ /| |____/\__/ /\__/ /
        # \_| \_/\___/|___/ \____(_)____/\____/
        #
        # require return statements after callbacks
        callback-return:
            - 2
            - ["done", "cb", "callback", "next"]
        # require require() calls to be placed at top-level module scope
        global-require: 0
        # require error handling in callbacks
        handle-callback-err:
            - 2
            - "^(err|error)$"
        # disallow require calls to be mixed with regular var declarations
        no-mixed-requires: 2
        # disallow new operators with calls to require
        no-new-require: 0
        # disallow string concatenation with __dirname and __filename
        no-path-concat: 1
        # disallow the use of process.env
        no-process-env: 0
        # disallow the use of process.exit()
        no-process-exit: 0
        # disallow specified modules when loaded by require
        no-restricted-modules: 0
        # disallow synchronous methods
        no-sync: 0

        #    _____ _______   ___      _____
        #   /  ___|_   _\ \ / / |    |  ___|
        #   \ `--.  | |  \ V /| |    | |__
        #    `--. \ | |   \ / | |    |  __|
        #   /\__/ / | |   | | | |____| |___
        #   \____/  \_/   \_/ \_____/\____/
        #
        # enforce consistent spacing inside array brackets
        array-bracket-spacing: 2
        # enforce consistent spacing inside single-line blocks
        block-spacing: 0
        # enforce consistent brace style for blocks
        brace-style:
            - 1
            - 'stroustrup'
        # enforce camelcase naming convention
        camelcase: 0
        # require or disallow trailing commas
        comma-dangle: 2
        # enforce consistent spacing before and after commas
        comma-spacing: 2
        # enforce consistent comma style
        comma-style: 2
        # enforce consistent spacing inside computed property brackets
        computed-property-spacing: 2
        # enforce consistent naming when capturing the current execution context
        consistent-this: 0
        # enforce at least one newline at the end of files
        eol-last: 2
        # require or disallow spacing between function identifiers and their invocations
        func-call-spacing: 2
        # require or disallow named function expressions
        func-names: 1
        # enforce the consistent use of either function declarations or expressions
        func-style: 0
        # disallow specified identifiers
        id-blacklist: 0
        # enforce minimum and maximum identifier lengths
        id-length:
            - 2
            - min: 2
              max: 30
              exceptions: ["x", "i", "j", "k", "l", "n"]
        # require identifiers to match a specified regular expression
        id-match: 0
        # enforce consistent indentation
        indent: 2
        # enforce the consistent use of either double or single quotes in JSX attributes
        jsx-quotes: 0
        # enforce consistent spacing between keys and values in object literal properties
        key-spacing: 2
        # enforce consistent spacing before and after keywords
        keyword-spacing: 2
        # require empty lines around comments
        lines-around-comment: 2
        # enforce a maximum depth that blocks can be nested
        max-depth: 2
        # warn if maximum line length 120 is exeeded
        max-len:
            - 1
            - 120
        # enforce a maximum number of lines per file
        max-lines: 0
        # enforce a maximum depth that callbacks can be nested
        max-nested-callbacks:
            - 2
            - max: 10
        # enforce a maximum number of parameters in function definitions
        max-params: 0
        # enforce a maximum number of statements allowed per line
        max-statements-per-line: 2
        # enforce a maximum number of statements allowed in function blocks
        max-statements: 0
        # enforce newlines between operands of ternary expressions
        multiline-ternary: 0
        # require constructor function names to begin with a capital letter
        new-cap: 0
        # require parentheses when invoking a constructor with no arguments
        new-parens: 2
        # require or disallow an empty line after var declarations
        newline-after-var: 0
        # require an empty line before return statements
        newline-before-return: 0
        # require a newline after each call in a method chain
        newline-per-chained-call: 2
        # disallow Array constructors
        no-array-constructor: 2
        # disallow bitwise operators
        no-bitwise: 0
        # disallow continue statements
        no-continue: 0
        # disallow inline comments after code
        no-inline-comments: 0
        # disallow if statements as the only statement in else blocks
        no-lonely-if: 2
        # disallow mixed binary operators
        no-mixed-operators: 0
        #v disallow mixed spaces and tabs for indentation
        no-mixed-spaces-and-tabs: 2
        # disallow multiple empty lines
        no-multiple-empty-lines:
            - 2
            - max: 2
              maxEOF: 1
              maxBOF: 0
        # disallow negated conditions
        no-negated-condition: 0
        # disallow nested ternary expressions
        no-nested-ternary: 0
        # disallow Object constructors
        no-new-object: 2
        # disallow the unary operators ++ and --
        no-plusplus: 0
        # disallow specified syntax
        no-restricted-syntax: 0
        # disallow tabs in file
        no-tabs: 2
        # disallow ternary operators
        no-ternary: 0
        # disallow trailing whitespace at the end of lines
        no-trailing-spaces: 2
        # disallow dangling underscores in identifiers
        no-underscore-dangle: 0
        # disallow ternary operators when simpler alternatives exist
        no-unneeded-ternary: 1
        # disallow whitespace before properties
        no-whitespace-before-property: 2
        # enforce consistent line breaks inside braces
        object-curly-newline: 0
        # enforce consistent spacing inside braces
        object-curly-spacing:
            - 2
            - "always"
        # enforce placing object properties on separate lines
        object-property-newline:
            - 2
            - allowMultiplePropertiesPerLine: true
        # require or disallow newlines around var declarations
        one-var-declaration-per-line: 2
        # enforce variables to be declared either together or separately in functions
        one-var:
            - 2
            - "never"
        # require or disallow assignment operator shorthand where possible
        operator-assignment: 0
        # enforce consistent linebreak style for operators
        operator-linebreak: 2
        # require or disallow padding within blocks
        padded-blocks: 0
        # require quotes around object literal property names
        quote-props:
            - 2
            - "always"
        # enforce the consistent use of either backticks, double, or single quotes
        quotes:
            - 2
            - "double"
            - allowTemplateLiterals: true
        # require JSDoc comments
        require-jsdoc:
            - 2
            - require:
                FunctionDeclaration: true
                ClassDeclaration: true
                MethodDefinition: false
        # enforce consistent spacing before and after semicolons
        semi-spacing: 2
        # require or disallow semicolons instead of ASI
        semi:
            - 2
            - "never"
        # requires object keys to be sorted
        sort-keys:
            - 1
            - "asc"
            - natural: true
        # require variables within the same declaration block to be sorted
        sort-vars: 0
        # enforce consistent spacing before blocks
        space-before-blocks: 2
        # enforce consistent spacing before function definition opening parenthesis
        space-before-function-paren:
             - 2
             - "never"
        # enforce consistent spacing inside parentheses
        space-in-parens: 2
        # require spacing around operators
        space-infix-ops: 2
        # enforce consistent spacing before or after unary operators
        space-unary-ops:
            - 2
            - words: true
              nonwords: false
        # enforce consistent spacing after the // or /* in a comment
        spaced-comment:
            - 2
            - "always"
            - exceptions:
                - "*"
        # require or disallow Unicode byte order mark (BOM)
        unicode-bom: 0
        # require parenthesis around regex literals
        wrap-regex: 0

        #  _____ _____  ____
        # |  ___/  ___|/ ___|
        # | |__ \ `--./ /___
        # |  __| `--. \ ___ \
        # | |___/\__/ / \_/ |
        # \____/\____/\_____/
        #
        # require braces around arrow function bodies
        arrow-body-style: 0
        # require parentheses around arrow function arguments
        arrow-parens: 2
        # enforce consistent spacing before and after the arrow in arrow functions
        arrow-spacing: 2
        # require super() calls in constructors
        constructor-super: 0
        # enforce consistent spacing around * operators in generator functions
        generator-star-spacing: 2
        # disallow reassigning class members
        no-class-assign: 0
        # disallow arrow functions where they could be confused with comparisons
        no-confusing-arrow: 2
        # disallow reassigning const variables
        no-const-assign: 2
        # disallow duplicate class members
        no-dupe-class-members: 2
        # disallow duplicate module imports
        no-duplicate-imports: 2
        # disallow new operators with the Symbol object
        no-new-symbol: 2
        # disallow specified modules when loaded by import
        no-restricted-imports: 0
        # disallow this/super before calling super() in constructors
        no-this-before-super: 0
        # disallow unnecessary computed property keys in object literals
        no-useless-computed-key: 2
        # disallow unnecessary constructors
        no-useless-constructor: 2
        # disallow renaming import, export, and destructured assignments to the same name
        no-useless-rename: 2
        # require let or const instead of var
        no-var: 0
        # require or disallow method and property shorthand syntax for object literals
        object-shorthand:
            - 2
            - "consistent"
        # require arrow functions as callbacks
        prefer-arrow-callback: 0
        # require const declarations for variables that are never reassigned after declared
        prefer-const: 0
        # require Reflect methods where applicable
        prefer-reflect: 0
        # require rest parameters instead of arguments
        prefer-rest-params: 0
        # require spread operators instead of .apply()
        prefer-spread: 0
        # require template literals instead of string concatenation
        prefer-template: 1
        # require generator functions to contain yield
        require-yield: 2
        # enforce spacing between rest and spread operators and their expressions
        rest-spread-spacing: 2
        # enforce sorted import declarations within modules
        sort-imports: 0
        # require symbol descriptions
        symbol-description: 2
        # require or disallow spacing around embedded expressions of template strings
        template-curly-spacing: 2
        # require or disallow spacing around the * in yield* expressions
        yield-star-spacing: 2
